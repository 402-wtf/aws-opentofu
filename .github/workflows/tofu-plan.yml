---
name: OpenTofu Plan - PR

on:
  pull_request:
    branches:
      - main

permissions:
  pull-requests: write # Required to write to PRs
  id-token: write      # This is required for requesting the JWT
jobs:
  DeployPlan:
    runs-on: ubuntu-latest
    name: Deployment Plan
    strategy:
      matrix:
        stack: ["1_account_infra", "2_email_setup"]
    defaults:
      run:
        working-directory: ${{ matrix.stack }}
    env:
      TF_VAR_ses_domains: ${{ vars.TF_VAR_SES_DOMAINS }}
      TF_INPUT: 0
      TF_IN_AUTOMATION: true
      AWS_REGION: ${{ vars.AWS_REGION }}
      CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_DNS_EDIT_TOKEN }}
    steps:
      - uses: actions/checkout@v3
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          role-to-assume: ${{ vars.AWS_GITHUB_ROLE }}_pr
          role-session-name: github_actions_pr
          aws-region: ${{ vars.AWS_REGION }}

      - uses: opentofu/setup-opentofu@v1
        with:
          tofu_version: 1.6.2

      - name: OpenTofu Format
        id: fmt
        run: tofu fmt -check
        continue-on-error: true

      - name: OpenTofu Init
        id: Init
        run: |
          tofu init \
            -backend-config="bucket=${{ vars.TOFU_STATE_BUCKET }}"\
            -backend-config="key=aws-opentofu/${{ matrix.stack }}.tfstate"

      - name: OpenTofu Validate
        id: Validate
        run: tofu validate -no-color

      - name: OpenTofu Plan
        id: Plan
        run: tofu plan -no-color
        continue-on-error: true

      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "tofu\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('OpenTofu Format and Style')
            })

            // 2. Prepare format of the comment
            const output = `#### OpenTofu Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### OpenTofu Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### OpenTofu Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### OpenTofu Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ matrix.stack }}\`, Workflow: \`${{ github.workflow }}\`*`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }
